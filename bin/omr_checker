#!/bin/bash

# OMR Checker Script
# This script stores the provided file in a unique folder inside inputs,
# copies the appropriate template, and sets up the output directory structure

# Set the script to exit on error
set -e

# Default values
FORMAT="jee"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
OMR_ROOT="$(dirname "$SCRIPT_DIR")"
STORE_FILE=""
CHECKSUM=""
PYTHON_PATH=""
PYTHON_ARGS=""

# Function to display usage information
usage() {
    echo "Usage: omr_checker --python-path PYTHON_PATH [--store-file FILE_PATH] --checksum CHECKSUM [--format FORMAT] [other_options]"
    echo "  --python-path      Path to the Python executable (required)"
    echo "  --store-file       Path to the file to store in a unique folder"
    echo "  --checksum         Checksum to use for creating unique folder names (required)"
    echo "  --format           OMR format to use - 'jee' or 'neet' (determines template)"
    echo "  -h, --help         Display this help message"
    echo ""
    echo "All other options will be passed directly to the OMR checker script."
    exit 1
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --store-file)
            STORE_FILE="$2"
            shift 2
            ;;
        --checksum)
            CHECKSUM="$2"
            shift 2
            ;;
        --format)
            FORMAT="$2"
            shift 2
            ;;
        --python-path)
            PYTHON_PATH="$2"
            shift 2
            ;;
        -h|--help)
            usage
            ;;
        *)
            # Collect remaining arguments to pass to Python script
            PYTHON_ARGS="$PYTHON_ARGS $1"
            shift
            ;;
    esac
done

# Check for required parameters
if [ -z "$CHECKSUM" ]; then
    echo "Error: --checksum is required"
    usage
fi

if [ -z "$PYTHON_PATH" ]; then
    echo "Error: --python-path is required"
    usage
fi

# Define input and output directories
INPUT_DIR="$OMR_ROOT/inputs/$CHECKSUM"
OUTPUT_DIR="$OMR_ROOT/outputs/$CHECKSUM"

# Make sure parent directories exist
if [ ! -d "$OMR_ROOT/inputs" ]; then
    echo "Creating parent input directory: $OMR_ROOT/inputs"
    mkdir -p "$OMR_ROOT/inputs"
fi

if [ ! -d "$OMR_ROOT/outputs" ]; then
    echo "Creating parent output directory: $OMR_ROOT/outputs"
    mkdir -p "$OMR_ROOT/outputs"
fi

# Delete existing directories if they exist
if [ -d "$INPUT_DIR" ]; then
    echo "Removing existing input directory: $INPUT_DIR"
    rm -rf "$INPUT_DIR"
fi

if [ -d "$OUTPUT_DIR" ]; then
    echo "Removing existing output directory: $OUTPUT_DIR"
    rm -rf "$OUTPUT_DIR"
fi

# Create fresh directories
mkdir -p "$INPUT_DIR"
mkdir -p "$OUTPUT_DIR"

# If a file path is provided, copy it to the input directory
if [ -n "$STORE_FILE" ] && [ -f "$STORE_FILE" ]; then
    # Copy the file to input directory with its original filename
    FILENAME=$(basename "$STORE_FILE")
    cp "$STORE_FILE" "$INPUT_DIR/$FILENAME"
    echo "File stored in $INPUT_DIR"
else
    if [ -n "$STORE_FILE" ]; then
        echo "Warning: File '$STORE_FILE' not found or not a regular file"
    fi
fi

# Copy template based on format
TEMPLATE_SOURCE="$OMR_ROOT/templates/$FORMAT.json"
TEMPLATE_DEST="$INPUT_DIR/template.json"

if [ -f "$TEMPLATE_SOURCE" ]; then
    cp "$TEMPLATE_SOURCE" "$TEMPLATE_DEST"
    echo "Using template: $FORMAT"
else
    echo "Error: Template for format '$FORMAT' not found at $TEMPLATE_SOURCE"
    exit 1
fi

# Define log file path
LOG_FILE="$OUTPUT_DIR/output.log"

# Print diagnostic information
echo "======== ENVIRONMENT DIAGNOSTICS ========"
echo "OMR_ROOT: $OMR_ROOT"
echo "INPUT_DIR: $INPUT_DIR"
echo "OUTPUT_DIR: $OUTPUT_DIR"
echo "PYTHON_PATH: $PYTHON_PATH"
echo "User/Group running script: $(id -u -n):$(id -g -n)"
echo "Permissions on directories:"
ls -la "$OMR_ROOT/inputs" "$OMR_ROOT/outputs"
echo "Contents of input directory:"
ls -la "$INPUT_DIR" || echo "Could not list input directory"
echo "======== END DIAGNOSTICS ========"

# Use the provided Python path with no fallbacks
PYTHON_CMD="$PYTHON_PATH $OMR_ROOT/main.py -i $INPUT_DIR -o $OUTPUT_DIR $PYTHON_ARGS"

# Try to execute xauth to check if it's available
if command -v xauth >/dev/null 2>&1; then
    # Wrap the Python command with Xvfb to provide a virtual display (with auth)
    XVFB_CMD="xvfb-run -a -s '-screen 0 1920x1080x24' $PYTHON_CMD"
else
    # If xauth is not available, use xvfb-run with the -n option to skip authentication
    echo "xauth not found, using xvfb-run without authentication"
    XVFB_CMD="xvfb-run -n -a -s '-screen 0 1920x1080x24' $PYTHON_CMD"
fi

echo "Executing: $XVFB_CMD"
echo "Output will be logged to: $LOG_FILE"

# Create a direct console output for errors
echo "Running Python command..."
echo "Command: $XVFB_CMD" > "$LOG_FILE"
echo "Start time: $(date)" >> "$LOG_FILE"

# Execute the command and capture the output
set +e  # Temporarily disable exit on error
$XVFB_CMD >> "$LOG_FILE" 2>&1
COMMAND_STATUS=$?
set -e  # Re-enable exit on error

echo "OMR processing completed with exit code: $COMMAND_STATUS" | tee -a "$LOG_FILE"

# If command failed, show the log output to stderr
if [ $COMMAND_STATUS -ne 0 ]; then
    echo "ERROR: Command failed with status $COMMAND_STATUS" >&2
    echo "--- Last 50 lines of log file ---" >&2
    tail -n 50 "$LOG_FILE" >&2
    echo "--------------------------------" >&2

    # More detailed error diagnostics
    echo "======== ERROR DIAGNOSTICS ========"
    echo "Command failed with status: $COMMAND_STATUS"
    echo "Python command was: $PYTHON_CMD"

    # Check the Python executable
    echo "Python executable details:"
    $PYTHON_PATH --version || echo "Could not determine Python version"

    # List directories again to see if anything changed
    echo "Input directory contents after execution:"
    ls -la "$INPUT_DIR" || echo "Could not list input directory"
    echo "Output directory contents after execution:"
    ls -la "$OUTPUT_DIR" || echo "Could not list output directory"
    echo "======== END ERROR DIAGNOSTICS ========"
fi

# Print a message to stdout about where the log is stored
echo "Processing complete. Log saved to $LOG_FILE"

# Look for the results CSV file and output its contents
RESULTS_DIR="$OUTPUT_DIR/Results"
if [ -d "$RESULTS_DIR" ]; then
    # Find the first CSV file that starts with "Results_" in the Results directory
    CSV_FILE=$(find "$RESULTS_DIR" -name "Results_*.csv" | head -1)
    
    if [ -n "$CSV_FILE" ]; then
        echo "Found results CSV file: $CSV_FILE"
        echo "CSV_RESULTS_START"
        cat "$CSV_FILE"
        echo "CSV_RESULTS_END"
    else
        echo "No Results_*.csv files found in the Results directory: $RESULTS_DIR"
        ls -la "$RESULTS_DIR"
    fi
else
    echo "Results directory not found at: $RESULTS_DIR"
fi

# Cleanup: Delete input and output directories after processing, but only if command was successful
if [ $COMMAND_STATUS -eq 0 ]; then
    echo "Command was successful. Cleaning up temporary directories..."
    if [ -d "$INPUT_DIR" ]; then
        rm -rf "$INPUT_DIR"
        echo "Deleted input directory: $INPUT_DIR"
    fi

    if [ -d "$OUTPUT_DIR" ]; then
        rm -rf "$OUTPUT_DIR"
        echo "Deleted output directory: $OUTPUT_DIR"
    fi
else
    echo "Command failed with status $COMMAND_STATUS. Keeping temporary directories for debugging."
    echo "Input directory: $INPUT_DIR"
    echo "Output directory: $OUTPUT_DIR"

    # Create a persistent error log that won't be deleted
    # Sanitize checksum to create a valid filename (replace problematic characters)
    SAFE_CHECKSUM=$(echo "$CHECKSUM" | tr -c '[:alnum:]' '_')
    ERROR_LOG="$OMR_ROOT/error_${SAFE_CHECKSUM}.log"
    echo "Creating persistent error log at: $ERROR_LOG"
    {
        echo "===== ERROR LOG FOR CHECKSUM: $CHECKSUM ====="
        echo "Timestamp: $(date)"
        echo "Command: $XVFB_CMD"
        echo "Exit code: $COMMAND_STATUS"
        echo ""
        echo "===== ENVIRONMENT ====="
        echo "OMR_ROOT: $OMR_ROOT"
        echo "INPUT_DIR: $INPUT_DIR"
        echo "OUTPUT_DIR: $OUTPUT_DIR"
        echo "PYTHON_PATH: $PYTHON_PATH"
        echo "User/Group: $(id -u -n):$(id -g -n)"
        echo ""
        echo "===== INPUT DIRECTORY CONTENTS ====="
        ls -la "$INPUT_DIR" 2>&1
        echo ""
        echo "===== OUTPUT DIRECTORY CONTENTS ====="
        ls -la "$OUTPUT_DIR" 2>&1
        echo ""
        echo "===== LOG FILE CONTENTS ====="
        if [ -f "$LOG_FILE" ]; then
            cat "$LOG_FILE"
        else
            echo "Log file does not exist"
        fi
    } > "$ERROR_LOG"
    echo "Error details saved to: $ERROR_LOG"
fi

exit $COMMAND_STATUS
